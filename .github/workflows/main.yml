name: CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: vitrine_client
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Copy .env.example to .env (backend)
        working-directory: ./backend
        run: |
          cp .env.example .env || echo "No .env.example, skipping"
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_USER=root" >> .env
          echo "DB_PASSWORD=root" >> .env
          echo "DB_DATABASE=vitrine_client" >> .env
          echo "SESSION_DRIVER=cookie" >> .env
          echo "APP_KEY=$(node ace generate:key --no-ansi)" >> .env
          echo "SMTP_HOST=smtp.example.com" >> .env
          echo "SMTP_PORT=587" >> .env
          echo "SMTP_USER=ci@example.com" >> .env
          echo "SMTP_PASS=ci_password" >> .env

      - name: Run backend migrations
        working-directory: ./backend
        run: node ace migration:run

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test || echo "No tests found"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend/dist
            backend

  deploy-frontend:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Deploy to Cloudflare Pages
        working-directory: ./frontend
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # Créer un fichier wrangler.toml temporaire pour le déploiement
          cat > wrangler.toml << EOF
          name = "vitrine-client-frontend"
          compatibility_date = "2024-01-01"
          compatibility_flags = ["nodejs_compat"]
          
          [site]
          bucket = "./dist"
          EOF
          
          # Déployer sur Cloudflare Pages
          wrangler pages deploy dist --project-name=paloma-9sq --branch=master 
